0,0 => 37
0,1 => 38
0,2 => 39
0,3 => 40

1,0 => 32
1,1 => 33
1,2 => 34
1,3 => 35

...

total_value = rank_value + file_number

ranks:

0 => 37
1 => 32
2 => 28
3 => 23
4 => 19
5 => 14
6 => 10
7 => 5


0 => 5
1 => 10
2 => 14
3 => 19
4 => 23
5 => 28
6 => 32
7 => 37

5 + (rank_number * 4.5).ceil

5 + ((7-rank_number) * 4.5).ceil

37 - (r * 4.5).ceil

rank 0 at top:
padded_array_index(rank,file) = 37 - (rank * 4.5).ceil + file

rank 0 at bottom:
padded_array_index(rank,file) =  5 + (rank * 4.5).ceil + file 

north-east: +5
north-west: +4
south-east: -4
south-west: -5

Movement:
_.{3,4}[wW]|W.{3,4}_
[bB].{3,4}_|_.{3,4}B

Jumps:
_...[bB]...[wW]|_....[bB]....[wW]|W...[bB]..._|W....[bB]...._
[bB]...[wW]..._|[bB]....[wW]...._|_...[wW]...B|_....[wW]....B

jump or move
_.{3,4}[wW]|W.{3,4}_|_...[bB]...[wW]|_....[bB]....[wW]|W...[bB]..._|W....[bB]...._
[bB].{3,4}_|_.{3,4}B|[bB]...[wW]..._|[bB]....[wW]...._|_...[wW]...B|_....[wW]....B


OOB values: 0,1,2,3,4,9,18,27,36,41,42,43,44,45

a move can be done from a square sq in direction d iff board[sq + d] yields 'empty'
a jump can be done from a square sq in direction d iff board[sq + d] yields opposing piece and board[sq + 2*d] yields empty

Usually prefer object orientation, but don't want to clutter up database with excessively overdone yaml; using integers will probably work fine

TODO: decide whether game serializes a Board object as YAML, or whether it stores the boardstring. I'm thinking Boardstring.